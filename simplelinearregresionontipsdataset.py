# -*- coding: utf-8 -*-
"""SimpleLinearRegresionOnTipsDataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hgrU18LRm_mFWcU3QqT1h5V4uEM1ljJy

**Mounting Google Drive and Loading Dataset**
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Path to your file in Google Drive
file_path = '/content/drive/MyDrive/tips.csv'

# Reading the CSV file into a DataFrame
df = pd.read_csv(file_path)

# Displaying the first few rows of the DataFrame
print(df.head())

"""**Check for Missing Values**"""

# Check for missing values
missing_values = df.isnull().sum()
print(missing_values)

"""**Check for Outliers**"""

import matplotlib.pyplot as plt
import seaborn as sns

# Visualize potential outliers using boxplots
plt.figure(figsize=(12, 6))
sns.boxplot(data=df[['total_bill', 'tip']])
plt.show()

# Get descriptive statistics
print(df[['total_bill', 'tip']].describe())

"""**Data Visualization**"""

import matplotlib.pyplot as plt

# Scatter plot
plt.scatter(df['total_bill'], df['tip'])
plt.xlabel('Total Bill')
plt.ylabel('Tip')
plt.title('Total Bill vs Tip')
plt.show()

"""**Model Building**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Independent variable (X) and dependent variable (y)
X = df[['total_bill']]
y = df['tip']

# Splitting the dataset into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Creating and training the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Displaying the coefficients
print(f'Intercept: {model.intercept_}')
print(f'Coefficient: {model.coef_[0]}')

"""**Model Evaluation**"""

from sklearn.metrics import mean_squared_error, r2_score

# Evaluating the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Comparing predicted values with actual values
comparison = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(comparison)